// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao/comment_dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/NUS-ISS-Agile-Team/ceramicraft-comment-mservice/server/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCommentDao is a mock of CommentDao interface.
type MockCommentDao struct {
	ctrl     *gomock.Controller
	recorder *MockCommentDaoMockRecorder
}

// MockCommentDaoMockRecorder is the mock recorder for MockCommentDao.
type MockCommentDaoMockRecorder struct {
	mock *MockCommentDao
}

// NewMockCommentDao creates a new mock instance.
func NewMockCommentDao(ctrl *gomock.Controller) *MockCommentDao {
	mock := &MockCommentDao{ctrl: ctrl}
	mock.recorder = &MockCommentDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentDao) EXPECT() *MockCommentDaoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCommentDao) Get(ctx context.Context, id string) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommentDaoMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommentDao)(nil).Get), ctx, id)
}

// HIncr mocks base method.
func (m *MockCommentDao) HIncr(ctx context.Context, key, member string, deta int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncr", ctx, key, member, deta)
	ret0, _ := ret[0].(error)
	return ret0
}

// HIncr indicates an expected call of HIncr.
func (mr *MockCommentDaoMockRecorder) HIncr(ctx, key, member, deta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncr", reflect.TypeOf((*MockCommentDao)(nil).HIncr), ctx, key, member, deta)
}

// SAdd mocks base method.
func (m *MockCommentDao) SAdd(ctx context.Context, key, member string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SAdd", ctx, key, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// SAdd indicates an expected call of SAdd.
func (mr *MockCommentDaoMockRecorder) SAdd(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockCommentDao)(nil).SAdd), ctx, key, member)
}

// Save mocks base method.
func (m *MockCommentDao) Save(ctx context.Context, comment *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCommentDaoMockRecorder) Save(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCommentDao)(nil).Save), ctx, comment)
}
